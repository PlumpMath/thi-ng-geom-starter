-*- mode: org; mode: visual-line; cider-buffer-ns: "geometer.turtle" -*-
#+STARTUP: indent
#+PROPERTY: header-args:clojure  :tangle turtle.cljc
#+PROPERTY: header-args:clojure+ :results value verbatim replace

* Contents                                                          :TOC_2_org:
 - [[Overview][Overview]]
 - [[Macros][Macros]]
   - [[Macro Namespace][Macro Namespace]]
   - [[Definitions][Definitions]]
 - [[Implementation Namespace][Implementation Namespace]]
 - [[Movement/Rotation][Movement/Rotation]]
 - [[Shape Primitives][Shape Primitives]]
 - [[Turtle Parameters][Turtle Parameters]]
 - [[Gamera][Gamera]]

* Overview

A "literate" reformatting of Jack Rusher's 3D turtle implementation from his [[https://github.com/jackrusher/geometer][geometer]] project.

Original is [[https://github.com/jackrusher/geometer/blob/master/src/cljs/geometer/turtle.cljc][here]].

* Macros
:PROPERTIES:
:header-args:clojure: :tangle macros.cljc
:END:

Tangle these utility macros out to another file. (This means we can't eval-in-place for these because ~cider-buffer-ns~ won't be right. Also, there is likely a race condition when exporting both files for Figwheel to pick up, if edits affect both ~.cljc~ output files.)

Original is [[https://github.com/jackrusher/geometer/blob/master/src/cljs/geometer/macros.cljc][here]].

** Macro Namespace

#+BEGIN_SRC clojure
  (ns geometer.macros
    (:require [thi.ng.geom.aabb   :refer [aabb]]
              [thi.ng.geom.core   :as g]
              [thi.ng.geom.matrix :refer [M44]]
              [thi.ng.geom.vector :refer [vec3]]
              [thi.ng.math.core   :as m]))
#+END_SRC

** Definitions

Creates a new movement operation called ~op~ that handles bookkeeping for ~:last-length~ and provides ~length~ to the lexical environment of the code passed in, which should be three expressions for the change in ~x~, ~y~ and ~z~.

#+BEGIN_SRC clojure
  (defmacro defmove
    [op x y z]
    `(defn ~op [t#]
       (let [~'length ((:length-fn t#) t#)]
         (update (assoc t# :last-length ~'length) :matrix g/translate ~x ~y ~z))))
#+END_SRC

Creates a new rotation operation called ~op~ on ~axis~ that handles bookkeeping for :last-angle and provides ~angle~ to the lexical environment of the rotation ~expr~.

#+BEGIN_SRC clojure
  (defmacro defrot
    [op axis expr]
    (let [rot-fn (case axis
                   x 'thi.ng.geom.core/rotate-x
                   y 'thi.ng.geom.core/rotate-y
                   z 'thi.ng.geom.core/rotate-z)]
      `(defn ~op [t#]
         (let [~'angle ((:angle-fn t#) t#)]
           (update (assoc t# :last-angle ~'angle)
                   :matrix ~rot-fn (m/radians ~expr))))))
#+END_SRC

Creates a new shape primitive called ~name~ that handles turtle matrix updates, bookkeeping for :last-length and provides ~length~ to the lexical environment of ~body~.

#+BEGIN_SRC clojure
  (defmacro defshape [name body]
    `(defn ~name [t#]
       (let [~'length ((:length-fn t#) t#)]
         (assoc t#
                :last-length ~'length
                :matrix (g/translate (:matrix t#) 0 0 ~'length)
                :mesh   (g/into (:mesh t#)
                                (-> ~body
                                    (g/transform (:matrix t#))
                                    (g/as-mesh)))))))
#+END_SRC

* Implementation Namespace

#+BEGIN_SRC clojure
(ns geometer.turtle
  (:require [thi.ng.geom.core      :as g]
            [thi.ng.geom.aabb      :refer [aabb]]
            [thi.ng.geom.basicmesh :as bm]
            [thi.ng.geom.circle    :refer [circle]]
            [thi.ng.geom.matrix    :refer [M44]]
            [thi.ng.geom.sphere    :refer [sphere]]
            [thi.ng.geom.vector    :refer [vec3]]
            [thi.ng.math.core      :as m])
  #?(:clj (:require [geometer.macros :refer [defmove defrot defshape]]))
  #?(:cljs (:require-macros [geometer.macros :refer [defmove defrot defshape]])))
#+END_SRC

* Movement/Rotation

#+BEGIN_SRC clojure
(defn center [turtle]
  (assoc turtle :matrix M44))

(defmove tx  length 0 0)
(defmove ty  0 length 0)
(defmove tz  0 0 length)
(defmove tx- (- length) 0 0)
(defmove ty- 0 (- length) 0)
(defmove tz- 0 0 (- length))

(defrot rx  x angle)
(defrot ry  y angle)
(defrot rz  z angle)
(defrot rx- x (- angle))
(defrot ry- y (- angle))
(defrot rz- z (- angle))

#+END_SRC

* Shape Primitives

#+BEGIN_SRC clojure
(defshape line
  (aabb (vec3 -0.25 -0.25 0) (vec3 0.5 0.5 length)))

(defshape box
  (aabb (vec3 (- (/ length 2)) (- (/ length 2)) 0) (vec3 length length length)))

(defshape plane
  (aabb (vec3 (- (/ length 2)) -0.25 0) (vec3 length 0.5 length)))

(defshape ball
  (g/as-mesh (sphere length)))

(defshape cylinder
  (g/into (-> (circle 1) (g/center) (g/extrude {:depth length}))
          (-> (sphere 1) (g/center) (g/as-mesh)))) ; ball end

(defshape disc
 (g/extrude (circle length) {}))

#+END_SRC

* Turtle Parameters

#+BEGIN_SRC clojure
(defn set-attr-fn
  "Returns a function that sets the `attr` function in the turtle to `x`, or if `x` is a number, to `(constantly x)`."
  [attr x]
  #(assoc %1 attr (if (number? x) (constantly x) x)))

(defn angle [a] (set-attr-fn :angle-fn a))
(defn length [l] (set-attr-fn :length-fn l))
(defn thickness [t] (set-attr-fn :thickness-fn t))

#+END_SRC

* Gamera

*TODO* add max-depth, max-objects, maybe seed?

#+BEGIN_SRC clojure
(def fresh-turtle
  {:matrix       M44
   :mesh         (bm/basic-mesh)
   :angle-fn     (constantly 90)
   :length-fn    (constantly 1)
   :thickness-fn (constantly 0.5)
   :depth        1})

(defn turtle-mesh
  "Execute a sequence of turtle instructions, return the resulting mesh."
  ([steps] (turtle-mesh fresh-turtle steps))
  ([turtle steps]
   (:mesh (reduce
           (fn [t step]
             (if (sequential? step) ; push matrix, do contained steps
               (update t :mesh #(g/into % (turtle-mesh t step)))
               (step t)))
           (update turtle :depth inc)
           steps))))

#+END_SRC

Some examples.

*TODO* move examples to another file later.

#+BEGIN_SRC clojure
(defn hoops
  "Generates a group of four toroids in a mesh using 3D turtle graphics primitives."
  []
  (turtle-mesh [(length 3)
                (angle 15)
                (map #(take 48 (cycle [line %])) [rx- rx ry ry-])]))

(defn hexen
  "A structure made of nesting hexagons."
  []
  (turtle-mesh
   (map (fn [a turn-out turn len]
          (concat
           [(angle a) turn-out (length (/ len 2)) tz (length len) (angle 60)]
           (take 12 (cycle [turn line]))))
        [60 120 240 300 0 45 90 -90 -45]
        (cycle [rx- rx ry- ry])
        (cycle [ry- ry rx rx-])
        [6 6 6 6 9 9 9 9])))

;; TODO add color to the "flower" ends
;; BUG very slow with latest geom, can no longer go more than one deep
(defn branch
  "A recursive branching tree structure with half-cylinder flowers."
  [level]
  (if (>= 0 level)
    [(length 1) cylinder]
    [(angle #(m/random 3 5)) ry-
     (length #(* (or (:last-length %) 2.5) (m/random 0.75 1.5)))
     (map (fn [[a b]] (concat (take 8 (cycle [a b])) (branch (dec level))))
          [[ry line] [ry- line] [rx line] [rx- line]])]))

(defn plant []
  (turtle-mesh (branch 1)))
#+END_SRC
