-*- mode: org; mode: visual-line; cider-buffer-ns: "thi-ng-geom-starter.video" -*-
#+STARTUP: indent
#+PROPERTY: header-args:clojure  :tangle video.cljs
#+PROPERTY: header-args:clojure+ :results value verbatim replace

* Contents                                                          :TOC_2_org:
 - [[Reference][Reference]]
   - [[Geom][Geom]]
   - [[Other][Other]]
 - [[Namespaces][Namespaces]]
 - [[DOM Media Containers][DOM Media Containers]]
 - [[Texture Creation][Texture Creation]]
 - [[Stream Setup][Stream Setup]]
 - [[Image Setup][Image Setup]]
 - [[Video Player Setup][Video Player Setup]]
 - [[Model: Plane][Model: Plane]]
   - [[Shader][Shader]]
   - [[Model][Model]]
 - [[Viewport Machinery][Viewport Machinery]]
 - [[Setup][Setup]]
 - [[Loop (Video Version)][Loop (Video Version)]]

* Reference
** Geom

- [[https://github.com/thi-ng/geom/blob/develop/src/gl/core.org][thi.ng.geom.core]] (~gl~) - [[https://gitter.im/thi-ng/geom][discussion]]
- [[https://github.com/thi-ng/geom/blob/develop/src/gl/buffers.org][thi.ng.geom.buffers]] (~buf~)

** Other

- [[http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/][Live Video in WebGL (via THREE.js)]]
- For FBO, see [[https://github.com/thi-ng/ws-ldn-8/blob/master/day1/ex03/src/ex03/webgl06.cljs][day1/ex03/webgl06]]
- For video, see [[https://github.com/thi-ng/ws-ldn-8/tree/master/day3/ex06/src/ex06][day3/ex06]]
- For mesh combination (the Phong example): [[https://github.com/thi-ng/geom/blob/develop/examples/gl/webgl.org#example-4-unproject--scene-raycasting][Unproject]]

* Namespaces

#+BEGIN_SRC clojure
  (ns thi-ng-geom-starter.video
    (:require [reagent.core :as reagent]
              [thi.ng.math.core :as m :refer [PI HALF_PI TWO_PI]]
              [thi.ng.geom.gl.core :as gl]
              [thi.ng.geom.gl.webgl.constants :as glc]
              [thi.ng.geom.gl.webgl.animator :as anim]
              [thi.ng.geom.gl.buffers :as buf]
              [thi.ng.geom.gl.fx :as fx]
              [thi.ng.geom.gl.shaders :as sh]
              [thi.ng.geom.gl.glmesh :as glm]
              [thi.ng.geom.gl.camera :as cam]
              [thi.ng.geom.gl.shaders :as sh]
              [thi.ng.geom.gl.shaders.lambert :as lambert]
              [thi.ng.geom.core :as g]
              [thi.ng.geom.vector :as v :refer [vec2 vec3]]
              [thi.ng.geom.matrix :as mat :refer [M44]]
              [thi.ng.geom.aabb :as a]
              [thi.ng.geom.plane :as p]
              [thi.ng.geom.attribs :as attr]
              [thi.ng.domus.core :as dom]
              [thi.ng.color.core :as col]
              [thi.ng.strf.core :as f]
              [thi-ng-geom-starter.shaders :as shaders])
      (:require-macros [cljs-log.core :refer [debug info warn severe]]))
#+END_SRC

#+RESULTS:
: nil

Application state. This used to be just set once, replaced via ~reset!~ when the initialisation was called on Reagent component mount. Now it's a bit smarter: we swap in the video stream once (if) it kicks off. (It's a Reagent atom so that we can show its state on-screen.)

#+BEGIN_SRC clojure
  (defonce app (reagent/atom {:stream {:state :wait}
                              :curr-shader :twirl}))
#+END_SRC

#+RESULTS:
: nil


* DOM Media Containers

#+BEGIN_SRC clojure
  (defn add-video-container [w h]
    (dom/create-dom! [:video {:width w :height h :hidden false :autoplay true}]
                     (.-body js/document)))

  (defn add-image-container [w h url loaded-fn]
    (let [d (dom/create-dom! [:img {:width w
                                    :height h}]
                             (.-body js/document))]

      (set! (.-onload d) #(loaded-fn d))
      (set! (.-src d) url)
      d))
#+END_SRC

* Texture Creation

Create "canvas" texture, bind into ~app~ state.

#+BEGIN_SRC clojure
  (defn init-texture [container]
    (let [tex (buf/make-canvas-texture
               (:gl @app)
               container
               {:filter      glc/linear
                :wrap        glc/clamp-to-edge
                :width       (.-width container)
                :height      (.-height container)
                :flip        true
                :premultiply false})]
      (swap! app assoc-in [:scene :img :shader :state :tex] tex)))
#+END_SRC

* Stream Setup

Helper: set stream state:

#+BEGIN_SRC clojure
  (defn set-stream-state! [state]
    (swap! app assoc-in [:stream :state] state))
#+END_SRC

Set up video texture. Requires a GL context.

Activate the RTC stream.

#+BEGIN_SRC clojure
  (defn activate-rtc-stream [video stream]
    (swap! app assoc-in [:stream :video] video)
    (set! (.-onerror video)
          (fn [] (.stop stream) (set-stream-state! :error)))
    (set! (.-onended stream)
          (fn [] (.stop stream) (set-stream-state! :stopped)))
    (set! (.-src video)
          (.createObjectURL (or (aget js/window "URL") (aget js/window "webkitURL")) stream))
    (set-stream-state! :ready)
    (init-texture video))
#+END_SRC

Stream initialisation. Add a video player to the DOM, then attempt to access camera.

Note: this API feature is deprecated: [[https://developer.mozilla.org/en/docs/Web/API/Navigator/getUserMedia]]

#+BEGIN_SRC clojure
  (defn init-rtc-stream [w h]
    (let [video (add-video-container w h)]
      (cond
        (aget js/navigator "webkitGetUserMedia")
        (.webkitGetUserMedia js/navigator #js {:video true}
                             #(activate-rtc-stream video %)
                             #(set-stream-state! :forbidden))

        (aget js/navigator "mozGetUserMedia")
        (.mozGetUserMedia js/navigator #js {:video true}
                          #(activate-rtc-stream video %)
                          #(set-stream-state! :forbidden))

        :else
        (set-stream-state! :unavailable))))
#+END_SRC

* Image Setup

*TODO* In all of these initialisers, we don't seem to be able to keep the custom shader and also do the ~gl/configure~ to keep tracking new frames. (But I have some code somewhere which does achieve this.)

#+BEGIN_SRC clojure
  (defn init-image [w h]
    (let [url "img/chocolate.jpg"
          image (add-image-container w h url
                                     #(do
                                        (init-texture %)
                                        (set-stream-state! :image)))]
      ;; This is the line that kills the custom shader. (We need this to update
      ;; frames from video or camera.)
      (swap! app assoc-in [:stream :video] image)))
#+END_SRC

* Video Player Setup

#+BEGIN_SRC clojure
  (defn init-video [w h]
    (let [c (dom/create-dom! [:video {:width w :height h :hidden false :autoplay true}
                              [:source {:src "video/s.mov"}]]
                             (.-body js/document))]
      (set! (.-oncanplay c) #(do (js/console.log "VIDEO onload")
                                    (init-texture c)
                                    (set-stream-state! :video)))
      (swap! app assoc-in [:stream :video] c)))
#+END_SRC

* Model: Plane
** Shader

Pretty generic texture mapping, give ~UV~ pass-through. Also, blend rather than depth-test.

#+BEGIN_SRC clojure
  (def shader-spec
    {:vs "void main() {
      vUV = uv;
      gl_Position = proj * view * model * vec4(position, 1.0);
      }"
     :fs "void main() {
      gl_FragColor = texture2D(tex, vUV);
      }"
     :uniforms {:model    [:mat4 M44]
                :view     :mat4
                :proj     :mat4
                :tex      :sampler2D}
     :attribs  {:position :vec3
                :uv       :vec2}
     :varying  {:vUV      :vec2}
     :state    {:depth-test false
                :blend      true
                :blend-fn   [glc/src-alpha glc/one]}})
#+END_SRC

** Model

Based on [[file:main.org::*Model:%20Colour-Face%20Lighting%20Cube][main/Model: Colour-Face Lighting Cube]]. We don't need an indexed mesh. Num faces is 2 per plane (post-tesselation). ~attr/uv-faces~ is part of the cube generator but works fine as a generic rectangular face mapping (see [[https://github.com/thi-ng/geom/blob/develop/src/types/attribs.org][attribs]]).

*TODO* we aren't getting UV set properly for the second plane.

#+BEGIN_SRC clojure
  (defn make-model [gl]
    (-> (p/plane v/V3X 0.5)
    ;;(g/center)
        (g/as-mesh {:mesh (glm/gl-mesh (* 2 2) #{:uv})
                    :attribs {:uv attr/uv-faces}})
        (g/into (-> (p/plane v/V3X -0.5)
                    (g/as-mesh)))
        (gl/as-gl-buffer-spec {})
        (assoc :shader (sh/make-shader-from-spec gl shader-spec))
        (gl/make-buffers-in-spec gl glc/static-draw)))
#+END_SRC

* Viewport Machinery

Rebuild view rectangle (on resize).

(We don't rebuild the GL context, which seems odd as Reagent would appear to be replacing the main canvas; perhaps Reagent is smart enough to just resize the one that's already there. We could replace the GL, but I'm not sure how/if the old one needs to be explicitly discarded first.)

#+BEGIN_SRC clojure
  (defn rebuild-viewport [app]
    (let [gl (:gl app)
          _  (gl/set-viewport gl {:p [0 0] :size [(.-innerWidth js/window) (.-innerHeight js/window)]})
          vr (gl/get-viewport-rect gl)]
      (assoc app
             :view-rect vr
             ;; :model (make-model gl vr)
             )))
#+END_SRC

* Setup

Setup. Generate a GL context (from DOM element ~main~), viewport rectangle and model, attach to the application. Also kick off the texture loading.

#+BEGIN_SRC clojure
  (defn init-app
    [this]
    (let [vw        640
          vh        480
          gl        (gl/gl-context (reagent/dom-node this))
          view-rect (gl/get-viewport-rect gl)
          thresh    (sh/make-shader-from-spec gl shaders/threshold-shader-spec)
          hue-shift (sh/make-shader-from-spec gl shaders/hueshift-shader-spec)
          twirl     (sh/make-shader-from-spec gl shaders/twirl-shader-spec)
          pixelate  (sh/make-shader-from-spec gl shaders/pixelate-shader-spec)
          tile      (sh/make-shader-from-spec gl shaders/tile-shader-spec)
          fbo-tex   (buf/make-texture
                     gl {:width  512
                         :height 512
                         :filter glc/linear
                         :wrap   glc/clamp-to-edge})
          fbo       (buf/make-fbo-with-attachments
                     gl {:tex    fbo-tex
                         :width  512
                         :height 512
                         :depth? true})]
      (swap! app merge
             {:gl          gl
              :view        view-rect
              :shaders     {:thresh    thresh
                            :hue-shift hue-shift
                            :twirl     twirl
                            :tile      tile
                            :pixelate  pixelate}
              :scene       {:fbo     fbo
                            :fbo-tex fbo-tex
                            :model   (make-model gl)
                            :img     (-> (fx/init-fx-quad gl)
                                         #_ (assoc :shader thresh))}})
      ;;(init-rtc-stream vw vh)
      ;;(init-video vw vh)
      (init-image vw vh)
      ))
#+END_SRC

* Loop (Video Version)

#+BEGIN_SRC clojure
  (def try-it true)

  (defn update-app
    [this]
    (fn [t frame]
      (let [{:keys [gl view scene stream shaders curr-shader]} @app]
        ;;(debug "frame with tex?" (str (get-in scene [:img :shader])))
        (when-let [tex (get-in scene [:img :shader :state :tex])]
          ;;(gl/configure tex {:image (:video stream)})
          (gl/bind tex)
          ;; render to texture
          (when try-it (gl/bind (:fbo scene)))
          (doto gl
            (gl/set-viewport 0 0 512 512)
            (gl/clear-color-and-depth-buffer col/BLACK 1)
            (gl/draw-with-shader
             (-> (:img scene)
                 (assoc-in [:uniforms :time] t)
                 (assoc :shader (shaders curr-shader)))))
          (when try-it (gl/unbind (:fbo scene)))
          ;; render model to main canvas
          (when try-it
            (gl/bind (:fbo-tex scene) 0)
            (doto gl
              (gl/set-viewport view)
              (gl/draw-with-shader
               (-> (:model scene)
                   (cam/apply
                    (cam/perspective-camera
                     {:eye (vec3 0 0 1.0) :fov 90 :aspect view}))
                   (assoc-in [:uniforms :model] (-> M44 (g/rotate-x t) (g/rotate-y (* t 2)))))))))
        (:active (reagent/state this)))))
#+END_SRC
