-*- mode: org; mode: visual-line; cider-buffer-ns: "thi-ng-geom-starter.core" -*-
#+STARTUP: indent
#+PROPERTY: header-args:clojure  :tangle core.cljs
#+PROPERTY: header-args:clojure+ :results value verbatim replace

* Comtemts                                                        :TOC_2_org:
 - [[COMMENT Figwheel Core][COMMENT Figwheel Core]]
 - [[Figwheel Core (New with Canvas)][Figwheel Core (New with Canvas)]]

* COMMENT Figwheel Core                                          :deprecated:

Original code: this is lifted straight from the Figwheel/Chestnut template. Everything hangs off ~app~ in a small boilerplate ~index.html~.

#+BEGIN_SRC clojure
  (ns thi-ng-geom-starter.core
    (:require [reagent.core :as reagent :refer [atom]]))

  (enable-console-print!)

  (defonce app-state (atom {:text "Hello Chestnut!"}))

  (defn greeting []
    [:h1 (:text @app-state)])

  (reagent/render [greeting] (js/document.getElementById "app"))
#+END_SRC

* Figwheel Core (New with Canvas)

Code lifted pretty much verbatim from [[https://github.com/thi-ng/ws-ldn-8/blob/master/day1/ex03/src/ex03/webgl03.cljs][webgl03]], updated with the Reagent canvas pattern with ~:init~ and ~:loop~ callbacks (into ~main~, the actual application). We added an ~:update~ callback to deal with resizing.

#+BEGIN_SRC clojure
  (ns thi-ng-geom-starter.core
    (:require [reagent.core :as reagent]
              [thi-ng-geom-starter.canvas :as canvas]
              [thi-ng-geom-starter.main :as main]
              [thi-ng-geom-starter.knots :as knots]
              [thi-ng-geom-starter.rings :as rings]
              [thi-ng-geom-starter.video :as video]
              [thi-ng-geom-starter.t-demo :as t-demo]))
#+END_SRC

#+RESULTS:
: nil

Enable console printing:

#+BEGIN_SRC clojure
  (enable-console-print!)
#+END_SRC

#+RESULTS:
: nil

Define the application component for Reagent. (Controls to come later.) Replace ~main~ by ~rings~ to see the extrusion demo code, or ~video~ for WebRTC experiments. (We also have ~knots~, but that doesn't have any resizing support.)

#+BEGIN_SRC clojure
    (defn app-component
      []
      [:div
       [canvas/canvas-component {:init video/init-app
                                 :loop video/update-app
                                 :update #(swap! video/app video/rebuild-viewport)}
                                 ]
       #_ [controls]])
#+END_SRC

#+RESULTS:
: #'thi-ng-geom-starter.core/app-component

Render component and add resize listener.

#+BEGIN_SRC clojure
  (reagent/render [app-component] (js/document.getElementById "app"))
  (.addEventListener js/window "resize" canvas/on-window-resize)
#+END_SRC

#+RESULTS:
: #object[Object [object Object]]
