-*- mode: org; mode: visual-line; cider-buffer-ns: "thi-ng-geom-starter.core" -*-
#+STARTUP: indent
#+PROPERTY: header-args:clojure  :tangle core.cljs
#+PROPERTY: header-args:clojure+ :results value verbatim replace

* Main Application
** COMMENT Figwheel Core                                        :deprecated:

Original code: this is lifted straight from the Figwheel/Chestnut template. Everything hangs off ~app~ in a small boilerplate ~index.html~.

#+BEGIN_SRC clojure
  (ns thi-ng-geom-starter.core
    (:require [reagent.core :as reagent :refer [atom]]))

  (enable-console-print!)

  (defonce app-state (atom {:text "Hello Chestnut!"}))

  (defn greeting []
    [:h1 (:text @app-state)])

  (reagent/render [greeting] (js/document.getElementById "app"))
#+END_SRC

** Figwheel Core (New with Canvas)

Code lifted pretty much verbatim from [[https://github.com/thi-ng/ws-ldn-8/blob/master/day1/ex03/src/ex03/webgl03.cljs][webgl03]]. In our case we plant the canvas via Reagent.

#+BEGIN_SRC clojure
  (ns thi-ng-geom-starter.core
    (:require [reagent.core :as reagent :refer [atom]]))

  (enable-console-print!)

  (defn canvas []
    [:canvas {:id "main" :width 1280 :height 720}])

  (reagent/render [canvas] (js/document.getElementById "app"))
#+END_SRC
