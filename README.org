-*- mode: org; mode: visual-line; -*-
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :results output silent
#+PROPERTY: header-args:clojure :results value verbatim replace
#+PROPERTY: header-args :exports none

* Contents                                                        :TOC_2_org:
 - [[Overview][Overview]]
 - [[Setup][Setup]]
 - [[Emacs Setup][Emacs Setup]]
 - [[Testing Clojure][Testing Clojure]]
 - [[ClojureScript, Figwheel and Chestnut][ClojureScript, Figwheel and Chestnut]]
 - [[The Main Application][The Main Application]]
 - [[Issues][Issues]]
 - [[To Do][To Do]]

* Overview

This is a test WebGL project using Karsten Schmidt's [[https://github.com/thi-ng][thi.ng]] tools for ClojureScript, written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style using [[https://www.gnu.org/software/emacs/][Emacs]], [[http://orgmode.org/][Org mode]] and [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel]].

* Setup

This project was created with

#+BEGIN_SRC sh
  lein new chestnut thi-ng-geom-starter -- --reagent
#+END_SRC

Chestnut seems to do its own initial git commit, so if a repository of the same name is created on GitHub, it just takes a quick

#+BEGIN_SRC sh
  git remote add origin git@github.com:<username>/thi-ng-geom-starter.git
#+END_SRC

followed by a ~git push -u origin master~ to get everything synchronised.

A couple of notes on the initial project build:

- We're using [[https://github.com/plexus/chestnut][Chestnut]] rather than plain [[https://github.com/bhauman/lein-figwheel][Figwheel]] because it seems to bring up a proper ClojureScript REPL that we can connect into from Emacs (in fact, we can switch between them by saying ~(browser-repl)~ from Clojure and ~:cljs/quit~ from ClojureScript)
- We've gone [[https://reagent-project.github.io/][Reagent]] rather than [[https://github.com/omcljs/om][Om]] for simplicity
- We've only provided a flat namespace (~thi-ng-geom-starter~) rather than a qualified namespace (~eu.cassiel/[...]~) because of a bug in Chestnut which messes up the directory structure for qualified names

To get a fully functioning REPL for CIDER, I've added the following plugin dependencies:

- ~[cider/cider-nrepl "0.9.1"]~
- ~[refactor-nrepl "1.1.0"]~

* Emacs Setup

We're using Sam Aaron's [[http://overtone.github.io/emacs-live/][Emacs Live]], which comes with support for Clojure (via [[https://github.com/clojure-emacs/cider][CIDER]]). Org-mode babel [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][supports Clojure]], but this needs to be loaded via

#+BEGIN_SRC emacs-lisp
  (require 'ob-clojure)
#+END_SRC

Assuming you trust all the code in this repository, you can turn off confirmation when executing blocks:

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Since we'll be switching to/from sub-edit modes a lot, I sacrifice F12 to this:

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<f12>") 'org-edit-special)
  (define-key org-src-mode-map (kbd "<f12>") 'org-edit-src-exit)
#+END_SRC

Also, a quick key for exporting via /tangle/:

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<M-f12>") 'org-babel-tangle)
#+END_SRC

*TODO*: those should be in the hooks for ~org-mode~ and ~org-src-mode~.

Nice-to-have: Org mode [[https://github.com/snosov1/toc-org][table of contents]]. Needs this hook:

#+BEGIN_SRC emacs-lisp
  (if (require 'toc-org nil t)
      (add-hook 'org-mode-hook 'toc-org-enable)
    (warn "toc-org not found"))
#+END_SRC

* Testing Clojure

Start a Clojure session in the usual way, via ~M-x cider-jack-in~.

Here's a quick test. In this block, type ~C-c C-c~ to execute the code, or type ~C-c \acute{}~ to open a custom editor session for the block, with the usual Clojure editing tools.

#+BEGIN_SRC clojure
  (range 10)
#+END_SRC

#+RESULTS:
: (0 1 2 3 4 5 6 7 8 9)

Since a single Clojure session underlies Babel, all blocks share the same environment:

#+BEGIN_SRC clojure
  (def A (range 10))
#+END_SRC

#+RESULTS:
: #'user/A

#+BEGIN_SRC clojure
A
#+END_SRC

#+RESULTS:
: (0 1 2 3 4 5 6 7 8 9)

* ClojureScript, Figwheel and Chestnut

To start the Figwheel server:

#+BEGIN_SRC clojure
  (run)
#+END_SRC

#+RESULTS:
: nil

To switch from Clojure to ClojureScript:

#+BEGIN_SRC clojure :results output verbatim
  (browser-repl)
#+END_SRC

#+RESULTS:
#+begin_example
Launching ClojureScript REPL for build: app
Figwheel Controls:
          (stop-autobuild)                ;; stops Figwheel autobuilder
          (start-autobuild [id ...])      ;; starts autobuilder focused on optional ids
          (switch-to-build id ...)        ;; switches autobuilder to different build
          (reset-autobuild)               ;; stops, cleans, and starts autobuilder
          (reload-config)                 ;; reloads build config and resets autobuild
          (build-once [id ...])           ;; builds source one time
          (clean-builds [id ..])          ;; deletes compiled cljs target files
          (print-config [id ...])         ;; prints out build configurations
          (fig-status)                    ;; displays current state of system
  Switch REPL build focus:
          :cljs/quit                      ;; allows you to switch REPL to another build
    Docs: (doc function-name-here)
    Exit: Control+C or :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
Prompt will show when Figwheel connects to your application
To quit, type: :cljs/quit
#+end_example

Note: this requires a browser to be running and connected to ~http://localhost:3449~.

And back:

#+BEGIN_SRC clojure :results output silent
:cljs/quit
#+END_SRC

To see which environment we're currently in:

#+BEGIN_SRC clojure :results value verbatim
  #?(:clj  (str "Clojure @ " (java.util.Date.))
     :cljs (str "ClojureScript @ " (js/Date.)))
#+END_SRC

#+RESULTS:
: "ClojureScript @ Wed May 18 2016 15:52:17 GMT+0100 (BST)"

* The Main Application

See the [[file:src/cljs/thi_ng_geom_starter/core.org][main application]]. This is the entry point for the Leiningen build. We (currently) have no server-side Clojure source code at all - everything is ClojureScript.

* Issues

- There's a problem with the behaviour of ~org-mode-fontify~ (which decorates code blocks): temporary buffers are associated with files, causing bogus "save file" prompts. Following the link [[http://emacs.stackexchange.com/questions/20593/org-src-fontify-natively-makes-magit-think-there-are-unsaved-files][on StackExchange]], this seems to be a workround:

#+BEGIN_SRC emacs-lisp
  (defun kill-org-src-buffers (&rest args)
    "Kill temporary buffers created by
  org-src-font-lock-fontify-block so they don't interfere with
  magit-mode."
    (dolist (b (buffer-list))
      (let ((bufname (buffer-name b)))
        (if (string-prefix-p " org-src-fontification:" bufname)
            (kill-buffer b)))))

  (advice-add 'org-src-font-lock-fontify-block
              :after #'kill-org-src-buffers)
#+END_SRC

- Namespace handling is awkward. When working with pure Clojure or ClojureScript files, CIDER searches upwards for ~ns~ declarations to establish the correct namespace; in Org mode this doesn't work. Every org file will probably start off with a code block containing an ~ns~ declaration to do various ~:require~ and ~:refer~ calls, so as long as you evaluate this block first all should be fine. We explicitly bind ~cider-buffer-ns~ in the (Emacs) variables for each file, useful if you visit a file for the first time after a session is already established. A more serious problem is that in ~edit-special~ (~C-c \acute{}~) sessions new buffers are established, and it's not clear how to set the default namespace for them. We need some Emacs lisp-fu to make that work. (We can't just add an ~ns~ statement to each block, since on export the multiple statements will be rejected in ClojureScript.) So, for now, it's not possible to REPL-evaluate in sub-edit.

  (And here's a gotcha: if you're refactoring, and do a "save as" to copy code to a new namespace, it's not enough to edit the value of ~cider-buffer-ns~ in the prelude; the value must be rebound as well. Easiest way: kill the new buffer and reload.)

- Evaluated source files won't carry line numbers that relate closely to code blocks, potentially making debugging a little tricky. (That's already true of REPL evaluation via ~C-M-x~.) I actually keep a second independent editor open on a second screen which auto-refreshes the exported code files, so that I can quickly eyeball what Clojure(Script) is seeing. (I've found [[http://brackets.io/][Brackets]] to work well.)

- I'm a little in the dark on Clojure reloading - I generally use ~cider-load-file~ (~C-c C-l~ in Clojure mode) and/or follow [[http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded][Stuart Sierra's workflow]]. Perhaps that needs to be tied into /tangle/ exporting somehow. ([[https://github.com/pyronicide/lein-autoreload][lein-autoreload]] might help.)

- Sorry about the ~acute{}~ business: there doesn't seem to be any way to format inline code containing isolated quotes.

* To Do

- We could do with a "tangle all Org files" command.
